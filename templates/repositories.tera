use crate::{
    models::{{table.name}}_gen::{ {{- table.name | as_upper_camel_case }}, {{ table.name | as_upper_camel_case }}Filter, {{ table.name | as_upper_camel_case }}Update},
    repository_base::RepositoryBase,
    repository_error::RepositoryResult, repository_transaction::RepositoryTransaction,
};
use async_trait::async_trait;
use sqlx::{MySql, QueryBuilder};
#[allow(unused)]
use uuid::Uuid;

#[rustfmt::skip]
#[async_trait]
pub trait {{ table.name | as_upper_camel_case }}Repository {
    async fn {{ table.name }}_insert(&self, {{ table.name }}: &{{ table.name | as_upper_camel_case }}) -> RepositoryResult;
    async fn {{ table.name }}_insert_array(&self, {{ table.name }}_array: &[{{ table.name | as_upper_camel_case }}]) -> RepositoryResult;
    async fn {{ table.name }}_delete(
        &self, 
{%- for column in table.primary_key_columns %}
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
{%- endfor %}
    ) -> RepositoryResult<bool>;
    async fn {{ table.name }}_select(
        &self, 
{%- for column in table.primary_key_columns %}
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
{%- endfor %}
    ) -> RepositoryResult<Option<{{ table.name | as_upper_camel_case }}>>;
    async fn {{ table.name }}_update(
        &self,
        {{ table.name }}_update: {{ table.name | as_upper_camel_case }}Update,
    ) -> RepositoryResult;
{%- for column in table.foreign_key_columns %}
    async fn {{ table.name }}_list_by_{{ column.name }}(
        &self,
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
    ) -> RepositoryResult<Vec<{{ table.name | as_upper_camel_case }}>>;
{%- endfor %}
{%- if table.unique_columns | length == 1 %}
{%- for column in table.unique_columns %}
    async fn {{ table.name }}_list_by_{{ column.name }}(
        &self,
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
    ) -> RepositoryResult<Vec<{{ table.name | as_upper_camel_case }}>>;
{%- endfor %}
{%- endif %}
    async fn {{ table.name }}_list(
        &self,
        filter: {{ table.name | as_upper_camel_case }}Filter,
    ) -> RepositoryResult<Vec<{{ table.name | as_upper_camel_case }}>>;
}

{%- set executors = ["&self.pool", "&mut *self.transaction.lock().await"] %}
{% for executor in executors %}
#[rustfmt::skip]
#[async_trait]
impl {{ table.name | as_upper_camel_case }}Repository for {% if loop.index0 == 0 %}RepositoryBase{% else %}RepositoryTransaction{% endif %} {
    async fn {{ table.name }}_insert(&self, {{ table.name }}: &{{ table.name | as_upper_camel_case }}) -> RepositoryResult {
        sqlx::query!(
            r#"
            {{ table.insert_sql }} VALUES {{ table.insert_sql_values }}
            "#,
{%- for column in table.columns %}
            {%- if column.primary_key and column.is_auto_increment == true %}{% continue %}{% endif %}
            {{ table.name }}.{{column.name}},
{%- endfor %}
        )
        .execute({{executor}})
        .await?;

        Ok(())
    }

    async fn {{ table.name }}_insert_array(&self, {{ table.name }}_array: &[{{ table.name | as_upper_camel_case }}]) -> RepositoryResult {
        let mut qb = QueryBuilder::<MySql>::new(r#"{{ table.insert_sql }}"#);
        qb.push_values({{ table.name }}_array, |mut b, {{ table.name }}| {
{%- for column in table.columns %}
            {%- if column.primary_key and column.is_auto_increment == true %}{% continue %}{% endif %}
            b.push_bind(&{{ table.name }}.{{column.name}});
{%- endfor %}
        });

        qb.build()
            .execute({{executor}})
            .await?;

        Ok(())
    }

    async fn {{ table.name }}_delete(
        &self, 
{%- for column in table.primary_key_columns %}
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
{%- endfor %}
    ) -> RepositoryResult<bool> {
        let rows_affected = sqlx::query!(
            r"
            {{ table.delete_sql }}
            ",
{%- for column in table.primary_key_columns %}
            {{column.name}},
{%- endfor %}
        )
        .execute({{executor}})
        .await?
        .rows_affected();

        Ok(rows_affected > 0)
    }

    async fn {{ table.name }}_select(
        &self, 
{%- for column in table.primary_key_columns %}
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
{%- endfor %}
    ) -> RepositoryResult<Option<{{ table.name | as_upper_camel_case }}>> {
        let row = sqlx::query_as!(
            {{ table.name | as_upper_camel_case }},
            r#"
            {{ table.select_sql }}
            WHERE {{ table.where_pk }}"#,
{%- for column in table.primary_key_columns %}
            {{column.name}},
{%- endfor %}
        )
        .fetch_optional({{executor}})
        .await?;

        Ok(row)
    }

    async fn {{ table.name }}_update(
        &self,
        {{ table.name }}_update: {{ table.name | as_upper_camel_case }}Update,
    ) -> RepositoryResult {
        {{ table.name }}_update
            .apply_query_builder()
            .build()
            .execute({{executor}})
            .await?;

        Ok(())
    }

{%- for column in table.foreign_key_columns %}
    async fn {{ table.name }}_list_by_{{ column.name }}(
        &self,
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
    ) -> RepositoryResult<Vec<{{ table.name | as_upper_camel_case }}>> {
        let result = sqlx::query_as!(
            {{ table.name | as_upper_camel_case }},
            r#"
            {{ table.select_sql }}
            WHERE {{ column.name }} = ?"#,
            {{column.name}},
        )
        .fetch_all({{executor}})
        .await?;

        Ok(result)
    }
{%- endfor %}
{%- if table.unique_columns | length == 1 %}
{%- for column in table.unique_columns %}
    async fn {{ table.name }}_list_by_{{ column.name }}(
        &self,
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
    ) -> RepositoryResult<Vec<{{ table.name | as_upper_camel_case }}>> {
        let result = sqlx::query_as!(
            {{ table.name | as_upper_camel_case }},
            r#"
            {{ table.select_sql }}
            WHERE `{{ column.name }}` = ?"#,
            {{column.name}},
        )
        .fetch_all({{executor}})
        .await?;

        Ok(result)
    }
{%- endfor %}
{%- endif %}
    async fn {{ table.name }}_list(
        &self,
        filter: {{ table.name | as_upper_camel_case }}Filter,
    ) -> RepositoryResult<Vec<{{ table.name | as_upper_camel_case }}>> {
        let result = filter
            .apply_query_builder()
            .build_query_as::<{{ table.name | as_upper_camel_case }}>()
            .fetch_all({{executor}})
            .await?;

        Ok(result)
    }
}
{% endfor %}