use crate::repository::models::{{table.name}}_gen::{{ table.name | as_upper_camel_case }};
use async_trait::async_trait;
use platform_core::repository::{
    repository_base::RepositoryBase, repository_error::RepositoryResult,
};
use uuid::Uuid;

#[rustfmt::skip]
#[async_trait]
pub trait {{ table.name | as_upper_camel_case }}Repository {
    async fn {{ table.name }}_insert(&self, {{ table.name }}: &{{ table.name | as_upper_camel_case }}) -> RepositoryResult;
    async fn {{ table.name }}_delete(
        &self, 
{%- for column in table.primary_keys %}
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
{%- endfor %}
    ) -> RepositoryResult<bool>;
    async fn {{ table.name }}_select(
        &self, 
{%- for column in table.primary_keys %}
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
{%- endfor %}
    ) -> RepositoryResult<Option<{{ table.name | as_upper_camel_case }}>>;
    
{%- for column in table.foreign_keys %}
    async fn {{ table.name }}_list_by_{{ column.name }}(
        &self,
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
    ) -> RepositoryResult<Vec<{{ table.name | as_upper_camel_case }}>>;
{%- endfor %}
}

#[rustfmt::skip]
#[async_trait]
impl {{ table.name | as_upper_camel_case }}Repository for RepositoryBase {
    async fn {{ table.name }}_insert(&self, {{ table.name }}: &{{ table.name | as_upper_camel_case }}) -> RepositoryResult {
        sqlx::query!(
            r#"
            {{ table.insert_sql }}
            "#,
{%- for column in table.columns %}
            {{ table.name }}.{{column.name}},
{%- endfor %}
        )
        .execute(&self.pool)
        .await?;

        Ok(())
    }

    async fn {{ table.name }}_delete(
        &self, 
{%- for column in table.primary_keys %}
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
{%- endfor %}
    ) -> RepositoryResult<bool> {
        let rows_affected = sqlx::query!(
            r"
            {{ table.delete_sql }}
            ",
{%- for column in table.primary_keys %}
            {{column.name}},
{%- endfor %}
        )
        .execute(&self.pool)
        .await?
        .rows_affected();

        Ok(rows_affected > 0)
    }

    async fn {{ table.name }}_select(
        &self, 
{%- for column in table.primary_keys %}
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
{%- endfor %}
    ) -> RepositoryResult<Option<{{ table.name | as_upper_camel_case }}>> {
        let row = sqlx::query_as!(
            {{ table.name | as_upper_camel_case }},
            r#"
            {{ table.select_sql }}
            WHERE {%for column in table.primary_keys %}{{ column.name}} = ?{%- endfor %}"#,
{%- for column in table.primary_keys %}
            {{column.name}},
{%- endfor %}
        )
        .fetch_optional(&self.pool)
        .await?;

        Ok(row)
    }

    {%- for column in table.foreign_keys %}
    async fn {{ table.name }}_list_by_{{ column.name }}(
        &self,
        {{column.name}}: {{column.data_type | to_rust_type(is_nullable=column.is_nullable) }},
    ) -> RepositoryResult<Vec<{{ table.name | as_upper_camel_case }}>> {
        todo!();
    }
{%- endfor %}
}
